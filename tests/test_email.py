import os, sys, requests
sys.dont_write_bytecode = True

# So I can import the files i need to test
cwd = os.getcwd()
sys.path.append(cwd)

from app.api.schema.schema import Email
from test_html_template import html 
from app.core.settings import settings 
from datetime import datetime, timedelta
from jose import jwt
from dotenv import load_dotenv

load_dotenv()

def create_token() -> str:
    return jwt.encode({"test": "data"}, settings.API_KEY, algorithm=settings.ALGORITHM)


# To delete the archives on the server, I have since deleted the endpoints but may add them again.
def test_obliterate_archive_directories(token: str, dir: str):
    url = f'http://0.0.0.0:8014/api/v1/logs/manage-archive/{dir}'

    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    tag: str = 'testing... testing'
    

    response = requests.request(
        "POST", 
        url, 
        headers=headers
    )

    print(response.json())


def test_text_message(token: str, cell_number: str, provider: str, message: str):
    '''
       Tests the text messaging endpoint
    '''
    url = f'http://0.0.0.0:8014/api/v1/sms/send-email-sms/'

    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    payload = {
        'message': message,
        'phone_number': cell_number,
        'provider': provider,
        'user_id': 0,
    }

    response = requests.request(
        "POST", 
        url, 
        headers=headers, 
        json=payload
    )

    print(response.json())




def test_email(token: str, endpoint: str):
    url = f'http://0.0.0.0:8014/api/v1/mail/{endpoint}/'

    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # WHen testing make sure you have access to an SMTP service. 
    # denoted by email_from
    email = Email(
        email_to="skedtxt.app@gmail.com",
        email_from="SMTP_service@lyourAPP.net",
        subject="EMAIL TESTING",
        message=html,   # a message in HTML format.
        user_id=None
    )    
    
    #for _ in range(1):  Up the value to send more than one.
    ##    time.sleep(1)    You can adjust this, but of it goes too far below .5 they no longer work.
    #                      This doesnt really mean anything as far as the solidity of the service goes
    #                      This email service is reliable. 
    response = requests.request(
            "POST", 
            url, 
            headers=headers, 
            json=email.dict()
        )

    print(response.json())


token: str = create_token()    # This service expects a JWT that would have been generated by the Auth-User service, which is the gateway 
                               # for the systems backend, and "create_token()" just mimics a basic token.  

# There are 2 email sending routes. 'send-email' and 'send-async'. Technically the are both asynchronous. THis
# route just uses async through FastAPI and not Celery. Not really sure why I added it, but here it is.
#endpoint: str = 'send-email' 
endpoint: str = 'send-async' 
test_email(token, endpoint)    
#test_obliterate_archive_directories(token, dir="debug")
# Sends a 
#test_text_message(token, "8439260677", "At&T", message="Sent to you by my Notification Micro service... Now it sends Text messages!")
